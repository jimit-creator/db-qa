[
  {
    "id": 71,
    "question": "What is the difference between SQL and NoSQL databases?",
    "answer": "<p>SQL and NoSQL databases differ in their data structure, scalability, and use cases.</p><h3>SQL (MySQL, PostgreSQL)</h3><ul><li>Uses tables with rows and columns</li><li>Requires predefined schema</li><li>Better for complex queries and relationships</li><li>ACID compliant</li></ul><h3>NoSQL (MongoDB)</h3><ul><li>Uses collections of documents</li><li>Schema-less and flexible</li><li>Better for scalability and big data</li><li>Eventually consistent</li></ul><h3>Example: Storing User Data</h3><pre><code>// SQL (MySQL/PostgreSQL)\nCREATE TABLE users (\n  id INT PRIMARY KEY,\n  name VARCHAR(100),\n  email VARCHAR(100),\n  created_at TIMESTAMP\n);\n\nINSERT INTO users (id, name, email) VALUES (1, 'John', 'john@example.com');\n\n// NoSQL (MongoDB)\ndb.users.insertOne({\n  name: 'John',\n  email: 'john@example.com',\n  created_at: new Date()\n});</code></pre>",
    "category": "Database",
    "difficulty": "Beginner"
  },
  {
    "id": 72,
    "question": "What are Indexes in Databases?",
    "answer": "<p>Indexes are data structures that improve the speed of data retrieval operations. Think of them like a book's index - instead of reading the whole book to find something, you can quickly look it up in the index.</p><h3>MySQL/PostgreSQL Index Example:</h3><pre><code>-- Creating an index\nCREATE INDEX idx_email ON users(email);\n\n-- Composite index\nCREATE INDEX idx_name_email ON users(name, email);\n\n-- Using index in query\nSELECT * FROM users WHERE email = 'john@example.com'; -- Uses index</code></pre><h3>MongoDB Index Example:</h3><pre><code>// Creating an index\ndb.users.createIndex({ email: 1 });\n\n// Compound index\ndb.users.createIndex({ name: 1, email: 1 });\n\n// Using index in query\ndb.users.find({ email: 'john@example.com' }); // Uses index</code></pre><h3>Types of Indexes:</h3><ul><li><strong>Single-column index:</strong> Index on one column</li><li><strong>Composite index:</strong> Index on multiple columns</li><li><strong>Unique index:</strong> Ensures no duplicate values</li><li><strong>Text index:</strong> For full-text search (MongoDB)</li></ul>",
    "category": "Database",
    "difficulty": "Beginner"
  },
  {
    "id": 73,
    "question": "What are Joins in SQL?",
    "answer": "<p>Joins combine rows from two or more tables based on related columns. Think of it like connecting puzzle pieces from different tables.</p><h3>Types of Joins:</h3><pre><code>-- INNER JOIN: Returns matching records from both tables\nSELECT users.name, orders.order_id\nFROM users\nINNER JOIN orders ON users.id = orders.user_id;\n\n-- LEFT JOIN: Returns all records from left table and matching from right\nSELECT users.name, orders.order_id\nFROM users\nLEFT JOIN orders ON users.id = orders.user_id;\n\n-- RIGHT JOIN: Returns all records from right table and matching from left\nSELECT users.name, orders.order_id\nFROM users\nRIGHT JOIN orders ON users.id = orders.user_id;\n\n-- FULL JOIN: Returns all records when there's a match in either table\nSELECT users.name, orders.order_id\nFROM users\nFULL JOIN orders ON users.id = orders.user_id;</code></pre><h3>Real-world Example:</h3><pre><code>-- Get all users with their orders and products\nSELECT \n  users.name,\n  orders.order_date,\n  products.name as product_name\nFROM users\nINNER JOIN orders ON users.id = orders.user_id\nINNER JOIN order_items ON orders.id = order_items.order_id\nINNER JOIN products ON order_items.product_id = products.id\nWHERE orders.order_date > '2023-01-01';</code></pre>",
    "category": "Database",
    "difficulty": "Beginner"
  },
  {
    "id": 74,
    "question": "What is MongoDB Aggregation?",
    "answer": "<p>MongoDB Aggregation is a way to process data records and return computed results. It's like a pipeline where data goes through different stages.</p><h3>Basic Aggregation Example:</h3><pre><code>// Simple aggregation to count documents\ndb.orders.aggregate([\n  { $match: { status: 'completed' } },\n  { $group: { _id: '$customer_id', total: { $sum: '$amount' } } },\n  { $sort: { total: -1 } }\n]);</code></pre><h3>Complex Aggregation Example:</h3><pre><code>// Get total sales by product category with average order value\ndb.orders.aggregate([\n  { $unwind: '$items' },\n  { $lookup: {\n      from: 'products',\n      localField: 'items.product_id',\n      foreignField: '_id',\n      as: 'product'\n    }\n  },\n  { $unwind: '$product' },\n  { $group: {\n      _id: '$product.category',\n      totalSales: { $sum: '$items.price' },\n      avgOrderValue: { $avg: '$items.price' },\n      count: { $sum: 1 }\n    }\n  },\n  { $sort: { totalSales: -1 } }\n]);</code></pre><h3>Common Aggregation Stages:</h3><ul><li><code>$match</code>: Filter documents</li><li><code>$group</code>: Group documents</li><li><code>$sort</code>: Sort documents</li><li><code>$project</code>: Reshape documents</li><li><code>$lookup</code>: Join with another collection</li></ul>",
    "category": "Database",
    "difficulty": "Beginner"
  },
  {
    "id": 75,
    "question": "What is Database Normalization?",
    "answer": "<p>Normalization is the process of organizing data to reduce redundancy and improve data integrity. Think of it like organizing a library - books are categorized, and each book has a unique location.</p><h3>Normal Forms Example:</h3><pre><code>-- Before Normalization\nCREATE TABLE orders (\n  order_id INT,\n  customer_name VARCHAR(100),\n  customer_email VARCHAR(100),\n  product_name VARCHAR(100),\n  product_price DECIMAL,\n  order_date DATE\n);\n\n-- After Normalization (1NF, 2NF, 3NF)\nCREATE TABLE customers (\n  customer_id INT PRIMARY KEY,\n  name VARCHAR(100),\n  email VARCHAR(100)\n);\n\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(100),\n  price DECIMAL\n);\n\nCREATE TABLE orders (\n  order_id INT PRIMARY KEY,\n  customer_id INT,\n  order_date DATE,\n  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\nCREATE TABLE order_items (\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  FOREIGN KEY (order_id) REFERENCES orders(order_id),\n  FOREIGN KEY (product_id) REFERENCES products(product_id)\n);</code></pre><h3>Benefits of Normalization:</h3><ul><li>Reduces data redundancy</li><li>Improves data integrity</li><li>Makes updates easier</li><li>Reduces storage space</li></ul>",
    "category": "Database",
    "difficulty": "Beginner"
  },
  {
    "id": 76,
    "question": "What is Database Transactions?",
    "answer": "<p>Transactions are a sequence of operations that are treated as a single unit. They follow the ACID properties: Atomicity, Consistency, Isolation, and Durability.</p><h3>MySQL/PostgreSQL Transaction Example:</h3><pre><code>-- Transfer money between accounts\nBEGIN TRANSACTION;\n\nUPDATE accounts SET balance = balance - 100 WHERE id = 1;\nUPDATE accounts SET balance = balance + 100 WHERE id = 2;\n\n-- If everything is okay\nCOMMIT;\n\n-- If there's an error\nROLLBACK;</code></pre><h3>MongoDB Transaction Example:</h3><pre><code>// Transfer money between accounts\nconst session = client.startSession();\n\ntry {\n  session.startTransaction();\n\n  await accounts.updateOne(\n    { _id: 1 },\n    { $inc: { balance: -100 } },\n    { session }\n  );\n\n  await accounts.updateOne(\n    { _id: 2 },\n    { $inc: { balance: 100 } },\n    { session }\n  );\n\n  await session.commitTransaction();\n} catch (error) {\n  await session.abortTransaction();\n  throw error;\n} finally {\n  session.endSession();\n}</code></pre><h3>ACID Properties:</h3><ul><li><strong>Atomicity:</strong> All operations succeed or all fail</li><li><strong>Consistency:</strong> Database remains in a valid state</li><li><strong>Isolation:</strong> Transactions don't interfere with each other</li><li><strong>Durability:</strong> Committed changes are permanent</li></ul>",
    "category": "Database",
    "difficulty": "Beginner"
  },
  {
    "id": 77,
    "question": "What is Database Backup and Recovery?",
    "answer": "<p>Backup and recovery are processes to protect and restore database data. Think of it like having a spare key for your house.</p><h3>MySQL Backup Example:</h3><pre><code>-- Full backup\nmysqldump -u root -p database_name > backup.sql\n\n-- Restore from backup\nmysql -u root -p database_name < backup.sql\n\n-- Automated backup script\n#!/bin/bash\nmysqldump -u root -p database_name > backup_$(date +%Y%m%d).sql</code></pre><h3>MongoDB Backup Example:</h3><pre><code>// Full backup\nmongodump --db database_name --out /backup\n\n// Restore from backup\nmongorestore --db database_name /backup/database_name\n\n// Automated backup script\n#!/bin/bash\nmongodump --db database_name --out /backup/$(date +%Y%m%d)</code></pre><h3>Types of Backups:</h3><ul><li><strong>Full backup:</strong> Complete database copy</li><li><strong>Incremental backup:</strong> Only changed data since last backup</li><li><strong>Point-in-time recovery:</strong> Restore to specific time</li><li><strong>Continuous backup:</strong> Real-time data protection</li></ul>",
    "category": "Database",
    "difficulty": "Beginner"
  },
  {
    "id": 78,
    "question": "What is Database Query Optimization?",
    "answer": "<p>Query optimization is the process of improving database query performance. Think of it like finding the fastest route to your destination.</p><h3>MySQL/PostgreSQL Optimization Examples:</h3><pre><code>-- Bad query (no index usage)\nSELECT * FROM users WHERE name LIKE '%John%';\n\n-- Optimized query (using index)\nSELECT id, name FROM users WHERE name LIKE 'John%';\n\n-- Using EXPLAIN to analyze query\nEXPLAIN SELECT * FROM orders \nWHERE user_id = 1 \nAND order_date > '2023-01-01';\n\n-- Optimizing JOIN queries\nSELECT u.name, o.order_id\nFROM users u\nINNER JOIN orders o ON u.id = o.user_id\nWHERE o.status = 'completed'\nLIMIT 10;</code></pre><h3>MongoDB Optimization Examples:</h3><pre><code>// Bad query (no index)\ndb.users.find({ name: { $regex: /John/ } });\n\n// Optimized query (using index)\ndb.users.find({ name: { $regex: /^John/ } });\n\n// Using explain() to analyze query\ndb.orders.find({\n  user_id: 1,\n  order_date: { $gt: new Date('2023-01-01') }\n}).explain('executionStats');\n\n// Optimizing aggregation pipeline\ndb.orders.aggregate([\n  { $match: { status: 'completed' } },\n  { $limit: 10 },\n  { $lookup: {\n      from: 'users',\n      localField: 'user_id',\n      foreignField: '_id',\n      as: 'user'\n    }\n  }\n]);</code></pre><h3>Optimization Techniques:</h3><ul><li>Use appropriate indexes</li><li>Limit the data returned</li><li>Avoid SELECT *</li><li>Use proper JOIN types</li><li>Optimize WHERE clauses</li><li>Use pagination</li></ul>",
    "category": "Database",
    "difficulty": "Beginner"
  },
  {
    "id": 79,
    "question": "What is Database Replication and Sharding?",
    "answer": "<p>Replication and sharding are techniques for scaling databases. Replication is like having multiple copies of your data, while sharding is like splitting your data into smaller pieces.</p><h3>MySQL Replication Example:</h3><pre><code>-- Master configuration (my.cnf)\n[mysqld]\nserver-id = 1\nlog-bin = mysql-bin\n\n-- Slave configuration\n[mysqld]\nserver-id = 2\nrelay-log = mysql-relay-bin\nread_only = 1\n\n-- Setting up replication\nCHANGE MASTER TO\n  MASTER_HOST='master_host',\n  MASTER_USER='repl_user',\n  MASTER_PASSWORD='password',\n  MASTER_LOG_FILE='mysql-bin.000001',\n  MASTER_LOG_POS=0;\n\nSTART SLAVE;</code></pre><h3>MongoDB Sharding Example:</h3><pre><code>// Enable sharding for database\nsh.enableSharding('mydb');\n\n// Shard a collection\nsh.shardCollection('mydb.users', { country: 1, _id: 1 });\n\n// Add shards\nsh.addShard('shard1:27017');\nsh.addShard('shard2:27017');\n\n// Check shard status\nsh.status();</code></pre><h3>Benefits:</h3><ul><li><strong>Replication:</strong><ul><li>High availability</li><li>Read scaling</li><li>Disaster recovery</li></ul></li><li><strong>Sharding:</strong><ul><li>Write scaling</li><li>Data distribution</li><li>Improved performance</li></ul></li></ul>",
    "category": "Database",
    "difficulty": "Beginner"
  },
  {
    "id": 80,
    "question": "What are Stored Procedures and Functions?",
    "answer": "<p>Stored procedures and functions are pre-compiled SQL statements stored in the database. Think of them like pre-written recipes that you can use anytime.</p><h3>MySQL Stored Procedure Example:</h3><pre><code>DELIMITER //\n\nCREATE PROCEDURE GetUserOrders(IN user_id INT)\nBEGIN\n  SELECT o.order_id, o.order_date, p.name as product_name\n  FROM orders o\n  JOIN order_items oi ON o.id = oi.order_id\n  JOIN products p ON oi.product_id = p.id\n  WHERE o.user_id = user_id;\nEND //\n\nDELIMITER ;\n\n-- Using the stored procedure\nCALL GetUserOrders(1);</code></pre><h3>PostgreSQL Function Example:</h3><pre><code>CREATE OR REPLACE FUNCTION calculate_order_total(order_id INT)\nRETURNS DECIMAL AS $$\nDECLARE\n  total DECIMAL;\nBEGIN\n  SELECT SUM(quantity * price) INTO total\n  FROM order_items oi\n  JOIN products p ON oi.product_id = p.id\n  WHERE oi.order_id = $1;\n  \n  RETURN total;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Using the function\nSELECT calculate_order_total(1);</code></pre><h3>Benefits:</h3><ul><li>Improved performance</li><li>Code reusability</li><li>Better security</li><li>Reduced network traffic</li></ul>",
    "category": "Database",
    "difficulty": "Beginner"
  },
  {
    "id": 81,
    "question": "What is Database Security?",
    "answer": "<p>Database security involves protecting data from unauthorized access and ensuring data integrity. Think of it like securing your house with locks and alarms.</p><h3>MySQL Security Example:</h3><pre><code>-- Create user with specific privileges\nCREATE USER 'app_user'@'localhost' IDENTIFIED BY 'password';\nGRANT SELECT, INSERT, UPDATE ON mydb.* TO 'app_user'@'localhost';\n\n-- Restrict access to specific columns\nGRANT SELECT (id, name, email) ON mydb.users TO 'read_user'@'localhost';\n\n-- Enable SSL connection\nALTER USER 'app_user'@'localhost' REQUIRE SSL;</code></pre><h3>MongoDB Security Example:</h3><pre><code>// Create user with specific roles\ndb.createUser({\n  user: 'app_user',\n  pwd: 'password',\n  roles: [\n    { role: 'readWrite', db: 'mydb' },\n    { role: 'read', db: 'reports' }\n  ]\n});\n\n// Enable authentication\nsecurity:\n  authorization: enabled\n\n// Enable SSL\nnet:\n  ssl:\n    mode: requireSSL\n    PEMKeyFile: /path/to/mongodb.pem</code></pre><h3>Security Best Practices:</h3><ul><li>Use strong passwords</li><li>Implement least privilege</li><li>Enable encryption</li><li>Regular security audits</li><li>Keep software updated</li><li>Backup regularly</li></ul>",
    "category": "Database",
    "difficulty": "Beginner"
  },
  {
    "id": 82,
    "question": "What is Database Migration?",
    "answer": "<p>Database migration is the process of moving data from one database to another or updating database schema. Think of it like moving to a new house with all your belongings.</p><h3>MySQL Migration Example:</h3><pre><code>-- Create migration table\nCREATE TABLE migrations (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  name VARCHAR(255),\n  applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Migration file: 001_create_users_table.sql\nCREATE TABLE users (\n  id INT PRIMARY KEY,\n  name VARCHAR(100),\n  email VARCHAR(100)\n);\n\n-- Migration file: 002_add_phone_to_users.sql\nALTER TABLE users\nADD COLUMN phone VARCHAR(20);\n\n-- Rollback file: 002_add_phone_to_users_rollback.sql\nALTER TABLE users\nDROP COLUMN phone;</code></pre><h3>MongoDB Migration Example:</h3><pre><code>// Migration script\nasync function migrateData() {\n  // Update document structure\n  await db.users.updateMany(\n    { phone: { $exists: false } },\n    { $set: { phone: null } }\n  );\n\n  // Move data to new collection\n  await db.users.aggregate([\n    { $match: { status: 'active' } },\n    { $out: 'active_users' }\n  ]);\n\n  // Create new indexes\n  await db.active_users.createIndex({ email: 1 });\n}</code></pre><h3>Migration Best Practices:</h3><ul><li>Backup before migration</li><li>Test in staging environment</li><li>Plan for rollback</li><li>Schedule during low traffic</li><li>Monitor progress</li><li>Verify data integrity</li></ul>",
    "category": "Database",
    "difficulty": "Beginner"
  },
  {
    "id": 83,
    "question": "What is Database Monitoring?",
    "answer": "<p>Database monitoring involves tracking database performance, health, and usage. Think of it like having a dashboard for your car showing speed, fuel, and engine status.</p><h3>MySQL Monitoring Example:</h3><pre><code>-- Check server status\nSHOW STATUS;\n\n-- Monitor slow queries\nSHOW VARIABLES LIKE 'slow_query%';\nSHOW VARIABLES LIKE 'long_query_time';\n\n-- Check process list\nSHOW PROCESSLIST;\n\n-- Monitor table statistics\nSHOW TABLE STATUS;\n\n-- Check index usage\nSHOW INDEX FROM users;</code></pre><h3>MongoDB Monitoring Example:</h3><pre><code>// Check server status\ndb.serverStatus();\n\n// Monitor operations\ndb.currentOp();\n\n// Check collection stats\ndb.users.stats();\n\n// Monitor index usage\ndb.users.aggregate([\n  { $indexStats: {} }\n]);\n\n// Check replication status\nrs.status();</code></pre><h3>Key Metrics to Monitor:</h3><ul><li>Query performance</li><li>Connection count</li><li>Memory usage</li><li>Disk space</li><li>Replication lag</li><li>Error rates</li><li>Backup status</li></ul>",
    "category": "Database",
    "difficulty": "Beginner"
  },
  {
    "id": 84,
    "question": "How to find the second highest/lowest value in a table?",
    "answer": "<p>There are several ways to find the second highest or lowest value in a table. Here are different approaches:</p><h3>Using LIMIT and OFFSET:</h3><pre><code>-- Second highest salary\nSELECT salary\nFROM employees\nORDER BY salary DESC\nLIMIT 1 OFFSET 1;\n\n-- Second lowest salary\nSELECT salary\nFROM employees\nORDER BY salary ASC\nLIMIT 1 OFFSET 1;</code></pre><h3>Using Subquery:</h3><pre><code>-- Second highest salary\nSELECT MAX(salary)\nFROM employees\nWHERE salary < (\n    SELECT MAX(salary)\n    FROM employees\n);\n\n-- Second lowest salary\nSELECT MIN(salary)\nFROM employees\nWHERE salary > (\n    SELECT MIN(salary)\n    FROM employees\n);</code></pre><h3>Using DENSE_RANK() (Modern SQL):</h3><pre><code>-- Second highest salary\nSELECT salary\nFROM (\n    SELECT salary,\n           DENSE_RANK() OVER (ORDER BY salary DESC) as rank\n    FROM employees\n) ranked\nWHERE rank = 2;\n\n-- Second lowest salary\nSELECT salary\nFROM (\n    SELECT salary,\n           DENSE_RANK() OVER (ORDER BY salary ASC) as rank\n    FROM employees\n) ranked\nWHERE rank = 2;</code></pre><h3>Handling Edge Cases:</h3><pre><code>-- Handle ties and NULL values\nSELECT salary\nFROM (\n    SELECT DISTINCT salary,\n           DENSE_RANK() OVER (ORDER BY salary DESC NULLS LAST) as rank\n    FROM employees\n) ranked\nWHERE rank = 2;</code></pre>",
    "category": "Database",
    "difficulty": "Beginner"
  },
  {
    "id": 85,
    "question": "How to find duplicate records in a table?",
    "answer": "<p>Finding duplicate records is a common task in database management. Here are different approaches:</p><h3>Using GROUP BY and HAVING:</h3><pre><code>-- Find duplicate emails\nSELECT email, COUNT(*) as count\nFROM users\nGROUP BY email\nHAVING COUNT(*) > 1;\n\n-- Find duplicate combinations\nSELECT first_name, last_name, COUNT(*) as count\nFROM employees\nGROUP BY first_name, last_name\nHAVING COUNT(*) > 1;</code></pre><h3>Using Window Functions:</h3><pre><code>-- Find all duplicate records with their IDs\nSELECT *\nFROM (\n    SELECT *,\n           COUNT(*) OVER (PARTITION BY email) as email_count\n    FROM users\n) counted\nWHERE email_count > 1;</code></pre><h3>Using Self Join:</h3><pre><code>-- Find duplicate records using self join\nSELECT DISTINCT a.*\nFROM users a\nJOIN users b\n    ON a.email = b.email\n    AND a.id < b.id;</code></pre><h3>Removing Duplicates:</h3><pre><code>-- Keep one record and delete others\nDELETE FROM users a\nUSING users b\nWHERE a.email = b.email\nAND a.id > b.id;</code></pre>",
    "category": "Database",
    "difficulty": "Beginner"
  },
  {
    "id": 86,
    "question": "How to find records that exist in one table but not in another?",
    "answer": "<p>There are several ways to find records that exist in one table but not in another. Here are the common approaches:</p><h3>Using NOT EXISTS:</h3><pre><code>-- Find customers who haven't placed orders\nSELECT c.*\nFROM customers c\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM orders o\n    WHERE o.customer_id = c.id\n);</code></pre><h3>Using LEFT JOIN:</h3><pre><code>-- Find customers who haven't placed orders\nSELECT c.*\nFROM customers c\nLEFT JOIN orders o ON c.id = o.customer_id\nWHERE o.id IS NULL;</code></pre><h3>Using NOT IN:</h3><pre><code>-- Find customers who haven't placed orders\nSELECT c.*\nFROM customers c\nWHERE c.id NOT IN (\n    SELECT customer_id\n    FROM orders\n);</code></pre><h3>Using EXCEPT (PostgreSQL):</h3><pre><code>-- Find customers who haven't placed orders\nSELECT id FROM customers\nEXCEPT\nSELECT customer_id FROM orders;</code></pre><h3>Performance Considerations:</h3><ul><li>NOT EXISTS is generally more efficient than NOT IN</li><li>LEFT JOIN can be faster with proper indexes</li><li>EXCEPT is clean but may be slower for large datasets</li><li>Consider using appropriate indexes on join columns</li></ul>",
    "category": "Database",
    "difficulty": "Beginner"
  },
  {
    "id": 87,
    "question": "How to find the top N records in each group?",
    "answer": "<p>Finding the top N records in each group is a common requirement. Here are different approaches:</p><h3>Using ROW_NUMBER():</h3><pre><code>-- Top 3 highest paid employees in each department\nSELECT *\nFROM (\n    SELECT *,\n           ROW_NUMBER() OVER (\n               PARTITION BY department_id\n               ORDER BY salary DESC\n           ) as rank\n    FROM employees\n) ranked\nWHERE rank <= 3;</code></pre><h3>Using DENSE_RANK():</h3><pre><code>-- Top 3 highest paid employees (including ties)\nSELECT *\nFROM (\n    SELECT *,\n           DENSE_RANK() OVER (\n               PARTITION BY department_id\n               ORDER BY salary DESC\n           ) as rank\n    FROM employees\n) ranked\nWHERE rank <= 3;</code></pre><h3>Using Correlated Subquery:</h3><pre><code>-- Top 3 highest paid employees in each department\nSELECT e.*\nFROM employees e\nWHERE (\n    SELECT COUNT(*)\n    FROM employees e2\n    WHERE e2.department_id = e.department_id\n    AND e2.salary > e.salary\n) < 3;</code></pre><h3>Using LIMIT with LATERAL (PostgreSQL):</h3><pre><code>-- Top 3 highest paid employees in each department\nSELECT d.name as department, e.*\nFROM departments d\nCROSS JOIN LATERAL (\n    SELECT *\n    FROM employees\n    WHERE department_id = d.id\n    ORDER BY salary DESC\n    LIMIT 3\n) e;</code></pre>",
    "category": "Database",
    "difficulty": "Beginner"
  },
  {
    "id": 88,
    "question": "How to find records with the most recent date in each group?",
    "answer": "<p>Finding the most recent records in each group is a common requirement. Here are different approaches:</p><h3>Using Window Functions:</h3><pre><code>-- Most recent order for each customer\nSELECT *\nFROM (\n    SELECT *,\n           ROW_NUMBER() OVER (\n               PARTITION BY customer_id\n               ORDER BY order_date DESC\n           ) as rn\n    FROM orders\n) ranked\nWHERE rn = 1;</code></pre><h3>Using Correlated Subquery:</h3><pre><code>-- Most recent order for each customer\nSELECT o.*\nFROM orders o\nWHERE o.order_date = (\n    SELECT MAX(order_date)\n    FROM orders o2\n    WHERE o2.customer_id = o.customer_id\n);</code></pre><h3>Using JOIN:</h3><pre><code>-- Most recent order for each customer\nSELECT o.*\nFROM orders o\nJOIN (\n    SELECT customer_id, MAX(order_date) as max_date\n    FROM orders\n    GROUP BY customer_id\n) latest ON o.customer_id = latest.customer_id\n    AND o.order_date = latest.max_date;</code></pre><h3>Using DISTINCT ON (PostgreSQL):</h3><pre><code>-- Most recent order for each customer\nSELECT DISTINCT ON (customer_id) *\nFROM orders\nORDER BY customer_id, order_date DESC;</code></pre>",
    "category": "Database",
    "difficulty": "Beginner"
  },
  {
    "id": 89,
    "question": "What is the difference between WHERE and HAVING clauses in SQL?",
    "answer": "<p>The main difference between WHERE and HAVING is that WHERE filters individual rows before grouping, while HAVING filters groups after grouping. Think of WHERE as a filter for individual items, and HAVING as a filter for groups of items.</p><h3>Basic Example:</h3><pre><code>-- Using WHERE (filters individual rows)\nSELECT department, AVG(salary) as avg_salary\nFROM employees\nWHERE salary > 30000  -- Filters individual employees\nGROUP BY department;\n\n-- Using HAVING (filters groups)\nSELECT department, AVG(salary) as avg_salary\nFROM employees\nGROUP BY department\nHAVING AVG(salary) > 50000;  -- Filters departments</code></pre><h3>Real-world Example:</h3><pre><code>-- Find departments with more than 5 employees\n-- who earn more than 30000\nSELECT \n    department,\n    COUNT(*) as employee_count,\n    AVG(salary) as avg_salary\nFROM employees\nWHERE salary > 30000  -- First filter individual employees\nGROUP BY department\nHAVING COUNT(*) > 5;  -- Then filter departments</code></pre><h3>Key Differences:</h3><ul><li><strong>WHERE:</strong><ul><li>Filters individual rows</li><li>Used before GROUP BY</li><li>Can't use aggregate functions</li><li>Faster performance</li></ul></li><li><strong>HAVING:</strong><ul><li>Filters groups</li><li>Used after GROUP BY</li><li>Can use aggregate functions</li><li>Slower performance</li></ul></li></ul><h3>Common Use Cases:</h3><pre><code>-- Find departments with high average salary\nSELECT department, AVG(salary) as avg_salary\nFROM employees\nGROUP BY department\nHAVING AVG(salary) > 50000;\n\n-- Find customers with multiple orders\nSELECT customer_id, COUNT(*) as order_count\nFROM orders\nGROUP BY customer_id\nHAVING COUNT(*) > 3;\n\n-- Find products with total sales over 1000\nSELECT product_id, SUM(quantity * price) as total_sales\nFROM order_items\nGROUP BY product_id\nHAVING SUM(quantity * price) > 1000;</code></pre><h3>Best Practices:</h3><ul><li>Use WHERE for filtering individual rows</li><li>Use HAVING for filtering groups</li><li>Apply WHERE first to reduce data before grouping</li><li>Use HAVING only when you need to filter on aggregate results</li><li>Consider performance impact when using HAVING</li></ul>",
    "category": "Database",
    "difficulty": "Beginner"
  }
]